#!/usr/bin/env python2

import os
import subprocess
import re
import json
import itertools

tmpDir = 'tmp'
kscOutputFn = tmpDir + '/test-target-ksc-output'
NO_COLORS = False
#os.system('./build-target .. target >{0} 2>&1'.format(kscOutputFn))

if not os.path.exists(tmpDir):
    os.makedirs(tmpDir, 0600)
    
reNewKsy = re.compile('^reading (.*?\\.ksy)...', re.I)
reNewLang = re.compile('^\\.\\.\\. compiling it for (\w+)\\.\\.\\. \\.\\.\\. => (.*)$', re.I)

results = {}
currKsy = None
currLang = None

with open(kscOutputFn) as kscOutputFile:
    for line in kscOutputFile:
        mNewKsy = reNewKsy.match(line)
        mNewLang = not mNewKsy and currKsy is not None and reNewLang.match(line)
        if mNewKsy:
            ksyPath = mNewKsy.group(1)
            results[ksyPath] = currKsy = {}
        elif mNewLang:
            langName = mNewLang.group(1)
            sourceFn = mNewLang.group(2)
            currKsy[langName] = currLang = { "sourceFn": sourceFn, "kscError": None, "kscErrorOutput": "" }
        elif currLang:
            if not currLang["kscError"]:
                currLang["kscError"] = line.strip()
            currLang["kscErrorOutput"] += line

allResults = []
for ksyFn in results:
    for lang in results[ksyFn]:
        result = results[ksyFn][lang]
        result["ksyFn"] = ksyFn
        result["lang"] = lang
        allResults.append(result)

kscFail = []
kscSuccess = []
for res in allResults:
    res["kscSuccess"] = not res["kscError"]
    if res["kscSuccess"]:
        kscSuccess.append(res)
    else:
        kscFail.append(res)

def saveResults():
    kscOutputJson = json.dumps(results, indent=4, sort_keys=True)
    with open(kscOutputFn + '.json', 'w') as f: f.write(kscOutputJson)
    #print kscOutputJson

saveResults()
    
colors = { "default": "\033[0m", "fail": "\033[91m", "success": "\033[92m" }
if NO_COLORS:
    for c in colors:
        colors[c] = ""
        
def fail(str):
    print colors["fail"] + str + colors["default"]
    
def success(str):
    print colors["success"] + str + colors["default"]

if kscFail:
    fail("ksc compilation errors:\n" + 
        ''.join([" - {ksyFn} ({lang}): {kscError}\n".format(**res) for res in kscFail]))
else:
    success("Yay there are no ksc compilation errors!")
    
langData = {
    "csharp": {
        "compileCmd": "mcs {sourceFn} test/Main.cs ../../runtime/csharp/*.cs",
        "errorRegex": r"Compilation failed: (\d+ error\(s\))"
    }
}

def groupby(items, keyFunc):
    return itertools.groupby(sorted(items, key=keyFunc), keyFunc)

unknownLangs = {}

for (langName, langItems) in groupby(kscSuccess, lambda x: x["lang"]):
    lang = langData.get(langName)
    if not lang:
        unknownLangs[langName] = True
        continue

    langItems = sorted(langItems, key=lambda x: x["ksyFn"])
    print "Compiling {0} sources...\n".format(langName)
    #print json.dumps(list(langItems), indent=4)

    errorRegex = re.compile(lang["errorRegex"]) if "errorRegex" in lang else None
    for res in langItems:
        compileCmd = lang["compileCmd"].format(**res)
        
        try:
            compileOutput = subprocess.check_output(compileCmd + " 2>&1", shell=True)
            compileExitCode = 0
        except subprocess.CalledProcessError as e:
            compileOutput = e.output
            compileExitCode = e.returncode
            
        res["compileOutput"] = compileOutput
        res["compileExitCode"] = compileExitCode
        
        prefix = "{ksyFn} ({lang})".format(**res)
        if compileExitCode != 0:
            errorFn = "{tmpDir}/error_{lang}_{ksyName}.txt".format(tmpDir = tmpDir, lang = res["lang"], ksyName = res["ksyFn"].replace("/", "_"))
            open(errorFn, "w").write(compileOutput)
            
            errorSummary = "";
            if errorRegex:
                m = errorRegex.search(compileOutput)
                if m:
                    errorSummary = '%s' % m.groups(1)

            fail(" - [FAIL] " + prefix + ": " + errorFn + (" (" + errorSummary + ")" if errorSummary else ""))
        else:
            success(' - [SUCCESS] ' + prefix)    

print
saveResults()
    
if unknownLangs:
    fail("The following languages are unknown and were not tested: " + ', '.join(unknownLangs))
